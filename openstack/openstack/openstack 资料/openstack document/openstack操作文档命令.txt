#######################openstack juno 安装草稿文档  #######################
@schangech@gmail.com


keystone 服务

创建数据库
CREATE DATABASE keystone;
授权
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
  IDENTIFIED BY 'keystonesoufun.com';
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
  IDENTIFIED BY 'keystonesoufun.com';
产生随机密码
# openssl rand -hex 10
4ed8987727719460dd46
安装软件包
# yum install openstack-keystone python-keystoneclient

Edit the /etc/keystone/keystone.conf
修改配置参数
[DEFAULT]
admin_token = ADMIN_TOKEN
[database]
...
connection = mysql://keystone:KEYSTONE_DBPASS@controller/keystone
[token]
...
provider = keystone.token.providers.uuid.Provider
driver = keystone.token.persistence.backends.sql.Token
[revoke]
...
driver = keystone.contrib.revoke.backends.sql.Revoke
[DEFAULT]
...
verbose = True
生成认证文件
# keystone-manage pki_setup --keystone-user keystone --keystone-group keystone
# chown -R keystone:keystone /var/log/keystone
# chown -R keystone:keystone /etc/keystone/ssl
# chmod -R o-rwx /etc/keystone/ssl
写入数据库
# su -s /bin/sh -c "keystone-manage db_sync" keystone
设置开机启动 并 启动服务
# systemctl enable openstack-keystone.service
# systemctl start openstack-keystone.service


清理keystone日志
(crontab -l -u keystone 2>&1 | grep -q token_flush) || \
  echo '* */1 * * * /usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1' \
  >> /var/spool/cron/keystone
  
设置环境变量
export OS_SERVICE_TOKEN=4ed8987727719460dd46   ##上面的随机数
export OS_SERVICE_ENDPOINT=http://controller:35357/v2.0


  
创建keystone 管理员帐户
keystone tenant-create --name admin --description "Admin Tenant"
创建admin帐户
keystone user-create --name admin --pass adminsoufun.com --email admin@soufun.com
创建admin角色
keystone role-create --name admin
将admin角色加入到admin项目中
keystone user-role-add --user admin --tenant admin --role admin

创建一个soufun项目
keystone tenant-create --name soufun --description "SouFun Tenant"
在soufun项目下创建soufun帐户
keystone user-create --name soufun --tenant soufun --pass soufun.com --email demo@soufun.com

创建一个service帐户给项目服务使用
keystone tenant-create --name service --description "Service Tenant"

针对keystone加入到API认证中
keystone service-create --name keystone --type identity \
  --description "OpenStack Identity"
  
创建endpoints API认证服务
keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ identity / {print $2}') \
  --publicurl http://controller:5000/v2.0 \
  --internalurl http://controller:5000/v2.0 \
  --adminurl http://controller:35357/v2.0 \
  --region regionOne
 
创建一个admin脚本环境
export OS_TENANT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=adminsoufun.com
export OS_AUTH_URL=http://controller:35357/v2.0    //注意，35357仅仅给管理员使用的端口

创建一个soufun脚本环境
export OS_TENANT_NAME=demo
export OS_USERNAME=demo
export OS_PASSWORD=soufun.com
export OS_AUTH_URL=http://controller:5000/v2.0     //注意，5000端口是给多有项目用户使用的端口，公用端口


####################################OpenStack Image Service#######################

OpenStack Image Service

创建数据库
CREATE DATABASE glance;
授权
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
  IDENTIFIED BY 'glancesoufun.com';
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
  IDENTIFIED BY 'glancesoufun.com';
  
切换到admin环境
keystone user-create --name glance --pass glancesoufun.com

给glance用户赋予admin角色，无输出
keystone user-role-add --user glance --tenant service --role admin
  
创建glance服务项目
keystone service-create --name glance --type image \
  --description "OpenStack Image Service"
  
创建glance API
keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ image / {print $2}') \
  --publicurl http://controller:9292 \
  --internalurl http://controller:9292 \
  --adminurl http://controller:9292 \
  --region regionOne
  
安装glance服务插件
yum install openstack-glance python-glanceclient

编辑配置文件
[database]
...
connection = mysql://glance:GLANCE_DBPASS@controller/glance

[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri=http://controller:35357
admin_tenant_name=service
admin_user=glance
admin_password=glancesoufun.com
revocation_cache_time=10
 
[paste_deploy]
...
flavor = keystone

[glance_store]
...
default_store = file
filesystem_store_datadir = /var/lib/glance/images/   ###空间需要比较大，可以使用外挂磁盘，或者软连接

[DEFAULT]
...
notification_driver = noop

[DEFAULT]
...
verbose = True

编辑配置另外一个配置文件
/etc/glance/glance-registry.conf

[database]
...
connection = mysql://glance:glancesoufun.com@controller/glance

[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = glance
admin_password = glancesoufun.com
 rys4/pz
[paste_deploy]
...
flavor = keystone

[DEFAULT]
...
notification_driver = noop

[DEFAULT]
...
verbose = True

完成安装，启动服务，设置开机启动
# systemctl enable openstack-glance-api.service openstack-glance-registry.service
# systemctl start openstack-glance-api.service openstack-glance-registry.service

切换到admin环境
source admin-openrc.sh

将cirros镜像导入到glance中
glance image-create --name "cirros-0.3.3-x86_64" --file /dev/shm/cirros-0.3.3-x86_64-disk.img \
  --disk-format qcow2 --container-format bare --is-public True --progress
  
检查是否导入成功
glance image-list



##############################OpenStack Compute  ##########################

计算服务 --Nova  控制节点上面的配置

创建数据库
mysql -u root -p
CREATE DATABASE nova;

授权
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
  IDENTIFIED BY 'novasoufun.com';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
  IDENTIFIED BY 'novasoufun.com';
  
切换到admin环境，创建NOVA 认证用户和权限
创建nova账户
keystone user-create --name nova --pass novasoufun.com

授予nova账户admin角色，无输出
keystone user-role-add --user nova --tenant service --role admin

创建nova服务项目
keystone service-create --name nova --type compute \
  --description "OpenStack Compute"
  
创建nova服务的API
keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ compute / {print $2}') \
  --publicurl http://controller:8774/v2/%\(tenant_id\)s \
  --internalurl http://controller:8774/v2/%\(tenant_id\)s \
  --adminurl http://controller:8774/v2/%\(tenant_id\)s \
  --region regionOne
  
安装和配置计算服务组件
yum install openstack-nova-api openstack-nova-cert openstack-nova-conductor \
  openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler \
  python-novaclient
  
编辑配置文件 /etc/nova/nova.conf
[database]
...
connection = mysql://nova:NOVA_DBPASS@controller/nova

[DEFAULT]
...
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = soufun.com

[DEFAULT]
...
auth_strategy = keystone
 
[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = nova
admin_password = novasoufun.com

配置指定控制节点的管理IP【如果使用的是集群，这里应该怎么配置】
[DEFAULT]
...
my_ip = 10.0.0.11   ####In the [DEFAULT] section, configure the my_ip option to use the management interface IP address of the controller node:

配置指定控制节点的管理IP【如果使用的是集群，这里应该怎么配置】
[DEFAULT]
...
vncserver_listen = 10.0.0.11    
vncserver_proxyclient_address = 10.0.0.11       ### In the [DEFAULT] section, configure the VNC proxy to use the management interface IP address of the controller node:

指定glance image服务
[glance]
...
host = controller

打印出更多日志信息
[DEFAULT]
...
verbose = True

将数据同步到数据库中
su -s /bin/sh -c "nova-manage db sync" nova

设置开机启动和启动服务
# systemctl enable openstack-nova-api.service openstack-nova-cert.service \
  openstack-nova-consoleauth.service openstack-nova-scheduler.service \
  openstack-nova-conductor.service openstack-nova-novncproxy.service
# systemctl start openstack-nova-api.service openstack-nova-cert.service \
  openstack-nova-consoleauth.service openstack-nova-scheduler.service \
  openstack-nova-conductor.service openstack-nova-novncproxy.service

  
  
计算服务 --Nova  计算节点上面的配置

安装软件包
yum install openstack-nova-compute sysfsutils

[DEFAULT]
...
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = RABBIT_PASS

[DEFAULT]
...
auth_strategy = keystone
[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = nova
admin_password = NOVA_PASS

[DEFAULT]
...
my_ip = MANAGEMENT_INTERFACE_IP_ADDRESS  ##Replace MANAGEMENT_INTERFACE_IP_ADDRESS with the IP address of the
management network interface on your compute node, typically 10.0.0.31

[DEFAULT]
...
vnc_enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = MANAGEMENT_INTERFACE_IP_ADDRESS    ###  Replace MANAGEMENT_INTERFACE_IP_ADDRESS with the IP address of the management network interface on your compute node, typically 10.0.0.31
novncproxy_base_url = http://controller:6080/vnc_auto.html

[glance]
...
host = controller

[DEFAULT]
...
verbose = True

查看硬件是否支持虚拟化
egrep -c '(vmx|svm)' /proc/cpuinfo 如果大于等于1，表示支持
如果不支持，必须设置为qemu
# systemctl enable libvirtd.service openstack-nova-compute.service
# systemctl start libvirtd.service openstack-nova-compute.service

完成之后，切回到控制节点查看信息
nova service-list
可以查看计算节点的信息
修改 zone ，只需要修改控制节点上的 /etc/nova/nova.conf 默认zone即可，然后重启nova-api服务


###########################　　OpenStack Networking (neutron)　　#####

neutron 服务    控制节点上面的配置

创建数据库
CREATE DATABASE neutron;

授权
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' \
IDENTIFIED BY 'neutronsoufun.com';
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' \
IDENTIFIED BY 'neutronsoufun.com';

创建neutron服务账户
keystone user-create --name neutron --pass neutronsoufun.com

授予neutron管理员权限，无输出
keystone user-role-add --user neutron --tenant service --role admin

创建neutron项目服务
keystone service-create --name neutron --type network \
--description "OpenStack Networking"

创建neutron api服务
keystone endpoint-create \
--service-id $(keystone service-list | awk '/ network / {print $2}') \
--publicurl http://controller:9696 \
--adminurl http://controller:9696 \
--internalurl http://controller:9696 \
--region regionOne

安装和配置网络服务组件
yum install openstack-neutron openstack-neutron-ml2 python-neutronclient which

配置文件
/etc/neutron/neutron.conf
配置数据库
[database]
...
connection = mysql://neutron:NEUTRON_DBPASS@controller/neutron

配置rabbitmq通信机制
[DEFAULT]
...
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = soufun.com

配置认证服务
[DEFAULT]
...
auth_strategy = keystone
[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = neutron
admin_password = neutronsoufun.com

配置网络插件
[DEFAULT]
...
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True

配置，让计算节点支持SDN网络结构形式
[DEFAULT]
...
notify_nova_on_port_status_changes = True
notify_nova_on_port_data_changes = True
nova_url = http://controller:8774/v2
nova_admin_auth_url = http://controller:35357/v2.0
nova_region_name = regionOne
nova_admin_username = nova
nova_admin_tenant_id = 17debad427f14c1285a84ea449077202   ### 查看ID的方式 keystone tenant-get service
nova_admin_password = novasoufun.com

[DEFAULT]
...
verbose = True

查看ID方式
$ source admin-openrc.sh
$ keystone tenant-get service

编辑支持neutron插件形式
/etc/neutron/plugins/ml2/ml2_conf.ini

[ml2]
...
type_drivers = flat,gre
tenant_network_types = gre
mechanism_drivers = openvswitch

[ml2_type_gre]
...
tunnel_id_ranges = 1:1000

[securitygroup]
...
enable_security_group = True
enable_ipset = True
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver

配置，让计算节点使用neutron
/etc/nova/nova.conf

[DEFAULT]
...
network_api_class = nova.network.neutronv2.api.API
security_group_api = neutron
linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[neutron]
...
url = http://controller:9696
auth_strategy = keystone
admin_auth_url = http://controller:35357/v2.0
admin_tenant_name = service
admin_username = neutron
admin_password = neutronsoufun.com

完成配置操作
ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

写入数据库
su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf \
  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade juno" neutron

systemctl restart openstack-nova-api.service openstack-nova-scheduler.service \
  openstack-nova-conductor.service
  
# systemctl enable neutron-server.service
# systemctl start neutron-server.service

验证配置
切换到admin环境
source admin-openrc.sh

列出加载的插件，查看是否成功运行neutron-server进程
neutron ext-list
  
neutron 服务 网络节点

Install and configure network node   

开启内核转发功能
net.ipv4.ip_forward=1
net.ipv4.conf.all.rp_filter=0
net.ipv4.conf.default.rp_filter=0

sysctl -p  让配置生效

安装网络节点软件包
yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-openvswitch

安装计算节点网络环境
编辑配置参数
/etc/neutron/neutron.conf
[DEFAULT]
...
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = soufun.com

[DEFAULT]
...
采用keystone做认证方式
auth_strategy = keystone

认证配置 
[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = neutron
admin_password = neutronsoufun.com

使用ml2网络路由模式
[DEFAULT]
...
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True

[DEFAULT]
...
verbose = True

配置modular 2层
编辑配置文件
/etc/neutron/plugins/ml2/ml2_conf.ini
[ml2]
...
type_drivers = flat,gre
tenant_network_types = gre
mechanism_drivers = openvswitch

[ml2_type_flat]
...
flat_networks = external   设置走br-ex外部网卡

[ml2_type_gre]
...
tunnel_id_ranges = 1:1000

[securitygroup]
...
enable_security_group = True
enable_ipset = True
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver

[ovs]
...
local_ip = INSTANCE_TUNNELS_INTERFACE_IP_ADDRESS   使用隧道IP
enable_tunneling = True
bridge_mappings = external:br-ex

[agent]
...
tunnel_types = gre

编辑L3层，提供路由服务
/etc/neutron/l3_agent.ini
[DEFAULT]
...
interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
use_namespaces = True
external_network_bridge = br-ex
router_delete_namespaces = True

[DEFAULT]
...
verbose = True

提供DHCP服务
/etc/neutron/dhcp_agent.ini
[DEFAULT]
...
interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
use_namespaces = True
dhcp_delete_namespaces = True

[DEFAULT]
...
verbose = True

/etc/neutron/dhcp_agent.ini
[DEFAULT]
...
dnsmasq_config_file = /etc/neutron/dnsmasq-neutron.conf

创建文件/etc/neutron/dnsmasq-neutron.conf
dhcp-option-force=26,1454

配置文件/etc/neutron/metadata_agent.ini，给实例提供认证机制的
[DEFAULT]
...
auth_url = http://controller:5000/v2.0
auth_region = regionOne
admin_tenant_name = service
admin_user = neutron
admin_password = neutronsoufun.com

[DEFAULT]
...
nova_metadata_ip = controller

[DEFAULT]
...
metadata_proxy_shared_secret = metadatasoufun.com

[DEFAULT]
...
verbose = True

【注意:跳转到控制节点上】
[neutron]
...
service_metadata_proxy = True
metadata_proxy_shared_secret = metadatasoufun.com 

systemctl restart openstack-nova-api.service

【切回网络节点】
# systemctl enable openvswitch.service
# systemctl start openvswitch.service
# ovs-vsctl add-br br-ex   【注意，必须创建br-ex网桥，并且设置外网IP地址】
# ovs-vsctl add-port br-ex INTERFACE_NAME

# ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini
# cp /usr/lib/systemd/system/neutron-openvswitch-agent.service \
  /usr/lib/systemd/system/neutron-openvswitch-agent.service.orig
# sed -i 's,plugins/openvswitch/ovs_neutron_plugin.ini,plugin.ini,g' \
  /usr/lib/systemd/system/neutron-openvswitch-agent.service
  
# systemctl enable neutron-openvswitch-agent.service neutron-l3-agent.service \
  neutron-dhcp-agent.service neutron-metadata-agent.service \
  neutron-ovs-cleanup.service
# systemctl start neutron-openvswitch-agent.service neutron-l3-agent.service \
  neutron-dhcp-agent.service neutron-metadata-agent.service
  


在控制节点上配置网络
配置内核参数
/etc/sysctl.conf
net.ipv4.conf.all.rp_filter=0
net.ipv4.conf.default.rp_filter=0

yum install openstack-neutron-ml2 openstack-neutron-openvswitch 安装基本软件

 /etc/neutron/neutron.conf
 
[database]不用配置，不用连数据库
 
[DEFAULT]
...
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = soufun.com

配置认证服务
[DEFAULT]
...
auth_strategy = keystone
 
[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = neutron
admin_password = neutronsoufun.com

[DEFAULT]
...
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True

[DEFAULT]
...
verbose = True


/etc/neutron/plugins/ml2/ml2_conf.ini
[ml2]
...
type_drivers = flat,gre
tenant_network_types = gre
mechanism_drivers = openvswitch

[ml2_type_gre]
...
tunnel_id_ranges = 1:1000

[securitygroup]
...
enable_security_group = True
enable_ipset = True
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver

[ovs]
...
local_ip = INSTANCE_TUNNELS_INTERFACE_IP_ADDRESS
enable_tunneling = True

[agent]
...
tunnel_types = gre

# systemctl enable openvswitch.service
# systemctl start openvswitch.service

/etc/nova/nova.conf 
[DEFAULT]
...
network_api_class = nova.network.neutronv2.api.API
security_group_api = neutron
linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[neutron]
...
url = http://controller:9696
auth_strategy = keystone
admin_auth_url = http://controller:35357/v2.0
admin_tenant_name = service
admin_username = neutron
admin_password = NEUTRON_PASS

# ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

# cp /usr/lib/systemd/system/neutron-openvswitch-agent.service \
  /usr/lib/systemd/system/neutron-openvswitch-agent.service.orig
# sed -i 's,plugins/openvswitch/ovs_neutron_plugin.ini,plugin.ini,g' \
  /usr/lib/systemd/system/neutron-openvswitch-agent.service
  
# systemctl restart openstack-nova-compute.service

# systemctl enable neutron-openvswitch-agent.service
# systemctl start neutron-openvswitch-agent.service

【控制节点】
创建网络
neutron net-create ext-net --router:external True \
  --provider:physical_network external --provider:network_type flat
  
$ neutron subnet-create ext-net --name ext-subnet \
  --allocation-pool start=FLOATING_IP_START,end=FLOATING_IP_END \
  --disable-dhcp --gateway EXTERNAL_NETWORK_GATEWAY EXTERNAL_NETWORK_CIDR


设置外部网络环境。让虚机支持访问外网
neutron net-create ext-net --router:external True \
  --provider:physical_network external --provider:network_type flat

创建IP地址池
neutron subnet-create ext-net --name ext-subnet \
  --allocation-pool start=124.251.50.3,end=124.251.50.20 \
  --disable-dhcp --gateway 124.251.50.1 124.251.50.0/24
  
切换到soufun项目环境
source soufun-openrc.sh

创建一个搜房的网络环境
neutron net-create soufun-net

创建一个子网络,网段为 10段
neutron subnet-create soufun-net --name soufun-subnet \
  --gateway 10.0.1.1 10.0.1.0/24

创建一个虚拟路由，多个不同网段之间通信，需要路由支持，创建好路由之后，将网段加入到路由下即可

创建路由
neutron router-create soufun-router

将创建的soufun网路加入到路由下
neutron router-interface-add soufun-router soufun-subnet

给路由设置网管，使用前面使用的外网网段，这样才能和外面通信
neutron router-gateway-set soufun-router ext-net

相关命令：

启动memcached服务,只有先启动memcached，openstack才能使用http启动
memcached -d -c 1024 -m 1024 -p 11211 -u nobody

virsh list
	查看启动的实例个数
	
	
注意点：
	1. br-ex 必须设置网桥模式，并且配置外网IP地址
TYPE=OVSBridge
DEVICETYPE=ovs
DEVICE=br-ex
OVSBOOTPROTO=static
OVSDHCPINTERFACES=eth1
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=124.251.50.2
NETMASK=255.255.255.0
GATEWAY=124.251.50.1

	2. 创建的虚拟路由必须使用admin账户创建
	source admin-openrc.sh
	
安装前端UI界面
yum install openstack-dashboard httpd mod_wsgi memcached python-memcached

/etc/openstack-dashboard/local_settings
OPENSTACK_HOST = "controller"， 我们使用的是openstack.light.fang.com  需要硬解到 124.251.47.218 

ALLOWED_HOSTS = ['*']

需要先启动memcached
CACHES = {
   'default': {
       'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
       'LOCATION': '127.0.0.1:11211',
   }
}
	
setsebool -P httpd_can_network_connect on

chown -R apache:apache /usr/share/openstack-dashboard/static

# systemctl enable httpd.service memcached.service
# systemctl start httpd.service memcached.service
	
	

###########cinder服务

GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' \
  IDENTIFIED BY 'cindersoufun.com';
GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' \
  IDENTIFIED BY 'cindersoufun.com';

keystone user-create --name cinder --pass cindersoufun.com

keystone user-role-add --user cinder --tenant service --role admin

keystone service-create --name cinder --type volume \
  --description "OpenStack Block Storage"
  
keystone service-create --name cinderv2 --type volumev2 \
  --description "OpenStack Block Storage"
  
  keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ volume / {print $2}') \
  --publicurl http://controller:8776/v1/%\(tenant_id\)s \
  --internalurl http://controller:8776/v1/%\(tenant_id\)s \
  --adminurl http://controller:8776/v1/%\(tenant_id\)s \
  --region regionOne

  keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ volumev2 / {print $2}') \
  --publicurl http://controller:8776/v2/%\(tenant_id\)s \
  --internalurl http://controller:8776/v2/%\(tenant_id\)s \
  --adminurl http://controller:8776/v2/%\(tenant_id\)s \
  --region regionOne

yum install openstack-cinder python-cinderclient python-oslo-db


生成cinder数据库
su -s /bin/sh -c "cinder-manage db sync" cinder


9505512



oa

